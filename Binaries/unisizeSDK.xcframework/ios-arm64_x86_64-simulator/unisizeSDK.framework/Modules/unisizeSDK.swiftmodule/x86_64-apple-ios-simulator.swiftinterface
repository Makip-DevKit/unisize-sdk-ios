// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name unisizeSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreTelephony
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import unisizeSDK
@objc public protocol UnisizeEnqueteDelegate {
  @objc func unisizeEnquete(_ enquete: unisizeSDK.UnisizeEnquete, didFinish: Swift.String)
  @objc func unisizeEnquete(_ enquete: unisizeSDK.UnisizeEnquete, didFail: unisizeSDK.UnisizeError)
  @objc func unisizePostMessage(_ enquete: unisizeSDK.UnisizeEnquete, messageBody: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class UnisizeEnquete : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any unisizeSDK.UnisizeEnqueteDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var enqueteRect: UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency public var webView: WebKit.WKWebView!
  @objc @_Concurrency.MainActor @preconcurrency public init(enqueteRect: UIKit.UIView, enableWebViewLog: Swift.Bool = false, enablePrintLog: Swift.Bool = false, sendErrorLog: Swift.Bool = true, delegate: (any unisizeSDK.UnisizeEnqueteDelegate)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @_Concurrency.MainActor @preconcurrency public func reload()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func close()
}
extension unisizeSDK.UnisizeEnquete : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension unisizeSDK.UnisizeEnquete : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
}
extension unisizeSDK.UnisizeEnquete : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webViewDidClose(_ webView: WebKit.WKWebView)
}
@objc public protocol UnisizeBannerDelegate {
  @objc optional func unisizeBanner(_ banner: unisizeSDK.UnisizeBanner, didFinish: Swift.String)
  @objc optional func unisizeBanner(_ banner: unisizeSDK.UnisizeBanner, didFail: unisizeSDK.UnisizeError)
  @objc optional func unisizeBanner(_ banner: unisizeSDK.UnisizeBanner, didResized: Swift.String, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, viewType: Swift.String)
  @objc optional func unisizeBanner(_ banner: unisizeSDK.UnisizeBanner, didLoaded: Swift.String, viewType: Swift.String)
  @objc optional func unisizeBanner(_ banner: unisizeSDK.UnisizeBanner, didUnsupported: Swift.String)
  @objc optional func unisizeBanner(_ banner: unisizeSDK.UnisizeBanner, didBeidChanged: Swift.String, recommendedItems: Swift.String, type: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class UnisizeBanner : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any unisizeSDK.UnisizeBannerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency weak public var parentView: UIKit.UIViewController?
  @objc @_Concurrency.MainActor @preconcurrency public init(textBannerRect: UIKit.UIView? = nil, exBannerRect: UIKit.UIView? = nil, ciBannerRect: UIKit.UIView? = nil, parentView: UIKit.UIViewController, cid: Swift.String, itm: Swift.String, cuid: Swift.String? = "", lang: Swift.String? = "ja", enableWebViewLog: Swift.Bool = false, enablePrintLog: Swift.Bool = false, sendErrorLog: Swift.Bool = true, delegate: (any unisizeSDK.UnisizeBannerDelegate)? = nil, customStyle: Swift.String? = "")
  @objc @_Concurrency.MainActor @preconcurrency public func setupParam(cid: Swift.String? = nil, itm: Swift.String? = nil, cuid: Swift.String? = nil, lang: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @_Concurrency.MainActor @preconcurrency public func reload()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func close()
}
extension unisizeSDK.UnisizeBanner : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension unisizeSDK.UnisizeBanner : unisizeSDK.UnisizeEnqueteViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func unisizeEnqueteViewController(_ enquete: unisizeSDK.UnisizeEnqueteViewController, didFinish message: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func unisizeEnqueteViewController(_ enquete: unisizeSDK.UnisizeEnqueteViewController, didFail errorObj: unisizeSDK.UnisizeError)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func unisizePostMessage(_ enqueteView: unisizeSDK.UnisizeEnqueteViewController, messageBody: Swift.String)
}
extension unisizeSDK.UnisizeBanner : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
}
@objc public protocol UnisizeEnqueteViewControllerDelegate {
  @objc func unisizeEnqueteViewController(_ enquete: unisizeSDK.UnisizeEnqueteViewController, didFinish: Swift.String)
  @objc func unisizeEnqueteViewController(_ enquete: unisizeSDK.UnisizeEnqueteViewController, didFail: unisizeSDK.UnisizeError)
  @objc func unisizePostMessage(_ enquete: unisizeSDK.UnisizeEnqueteViewController, messageBody: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class UnisizeEnqueteViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var enqueteRect: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var enableWebViewLog: Swift.Bool!
  @_Concurrency.MainActor @preconcurrency public var enablePrintLog: Swift.Bool!
  @_Concurrency.MainActor @preconcurrency public var sendErrorLog: Swift.Bool!
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any unisizeSDK.UnisizeEnqueteViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var unisizeEnquete: unisizeSDK.UnisizeEnquete!
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension unisizeSDK.UnisizeEnqueteViewController : unisizeSDK.UnisizeEnqueteDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func unisizeEnquete(_ enquete: unisizeSDK.UnisizeEnquete, didFinish message: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func unisizeEnquete(_ enquete: unisizeSDK.UnisizeEnquete, didFail errorObj: unisizeSDK.UnisizeError)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func unisizePostMessage(_ enquete: unisizeSDK.UnisizeEnquete, messageBody: Swift.String)
}
@objc @objcMembers public class UnisizeError : Foundation.NSError {
  public enum ErrorCode : Swift.Int {
    case unisizeBannerNoBannerRectError
    case unisizeBannerNoEnqueteViewControllerError
    case unisizeBannerTextBannerSizeJsonError
    case unisizeBannerNoTextBannerSizeJsonError
    case unisizeBannerExBannerSizeJsonError
    case unisizeBannerNoExBannerSizeJsonError
    case unisizeBannerJavascriptConsoleError
    case unisizeBannerSetParamsEvaluateJavaScriptError
    case unisizeBannerParamJsonSerializationError
    case unisizeBannerWebViewNavigationError
    case unisizeBannerWebViewProvisionalNavigationError
    case unisizeBannerNoPostMessageError
    case unisizeBannerTextBannerPostMessageEvaluateJavaScriptError
    case unisizeBannerExBannerPostMessageEvaluateJavaScriptError
    case unisizeBannerResourceAccessError
    case unisizeBannerPostMessageJsonDecodeError
    case unisizeBannerJavascriptError
    case unisizeBannerNoParamError
    case unisizeBannerCiBannerSizeJsonError
    case unisizeBannerNoCiBannerSizeJsonError
    case unisizeBannerCiBannerPostMessageEvaluateJavaScriptError
    case unisizeEnqueteJavascriptConsoleError
    case unisizeEnqueteParamJsonSerializationError
    case unisizeEnqueteWebViewNavigationError
    case unisizeEnqueteWebViewProvisionalNavigationError
    case unisizeEnqueteJavascriptError
    case unisizeEnqueteResourceAccessError
    case unisizeEnqueteViewJsonDecodeError
    case unisizeEnqueteViewNoPostMessageJsonError
    case unisizeCVTagJavascriptConsoleError
    case unisizeCVTagSetParamsEvaluateJavaScriptError
    case unisizeCVTagWebViewNavigationError
    case unisizeCVTagWebViewProvisionalNavigationError
    case unisizeCVTagJavascriptError
    case unisizeCVTagResourceAccessError
    public func getMessage() -> Swift.String
    public func debugPrint()
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var errorCode: unisizeSDK.UnisizeError.ErrorCode
  @objc public var clientId: Swift.String
  @objc public var itemId: Swift.String
  @objc public var purchaseid: Swift.String
  @objc public var cuid: Swift.String
  @objc public var lang: Swift.String
  @objc public var viewType: Swift.String
  @objc public var device: Swift.String
  @objc public var system: Swift.String
  @objc public var systemVer: Swift.String
  @objc public var other: Swift.String
  public init(errorCode: unisizeSDK.UnisizeError.ErrorCode, clientId: Swift.String = "", itemId: Swift.String = "", purchaseid: Swift.String = "", other: Swift.String = "", cuid: Swift.String = "", lang: Swift.String = "", viewType: Swift.String = "")
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func sendErrorLogging()
  @objc public func getJson() -> [Swift.String : Any]
  @objc public func getJsonString() -> Swift.String
  @objc deinit
}
@objc public protocol UnisizeCVTagDelegate {
  @objc optional func unisizeCVTag(_ banner: unisizeSDK.UnisizeCVTag, didFinish: Swift.String)
  @objc optional func unisizeCVTag(_ banner: unisizeSDK.UnisizeCVTag, didFail: unisizeSDK.UnisizeError)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class UnisizeCVTag : UIKit.UIView, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any unisizeSDK.UnisizeCVTagDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(cvTagRect: UIKit.UIView, cid: Swift.String, cuid: Swift.String? = "", purchaseid: Swift.String, itemnum: Swift.String? = "", itemid: Swift.String? = "", price: Swift.String? = "", size: Swift.String? = "", iteminfo: Swift.String? = "", iteminfojson: Swift.String? = "", regType: Swift.String? = "", enableWebViewLog: Swift.Bool = false, enablePrintLog: Swift.Bool = false, sendErrorLog: Swift.Bool = true, delegate: (any unisizeSDK.UnisizeCVTagDelegate)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @_Concurrency.MainActor @preconcurrency public func reloadWebView()
  @objc @_Concurrency.MainActor @preconcurrency public func reload()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func close()
}
extension unisizeSDK.UnisizeCVTag : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension unisizeSDK.UnisizeEnquete : Swift.Sendable {}
extension unisizeSDK.UnisizeBanner : Swift.Sendable {}
extension unisizeSDK.UnisizeError.ErrorCode : Swift.Equatable {}
extension unisizeSDK.UnisizeError.ErrorCode : Swift.Hashable {}
extension unisizeSDK.UnisizeError.ErrorCode : Swift.RawRepresentable {}
